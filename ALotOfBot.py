import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty
import sqlite3
import os
import re
import json
import logging
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import base64
import asyncio
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot_logs.log', level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7585246759:AAEJMLF64kQFqke2m_ZMX3OwwPxV-pBziIQ"
# API –¥–ª—è Telethon
API_ID = 25044500
API_HASH = "6358722d94915793a344196c42cfdd9"
# –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
ADMIN_PASSWORD = "U2h7t919k@%2840+]√ó0294&'n‚Ç©|‚óá‚Ä¢¬°‚ñ™Ô∏é‚ô§2910"
# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
DB_PATH = "alotof_data.db"
# –ö–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑, —Å–æ—Ö—Ä–∞–Ω–∏ –µ–≥–æ!)
ENCRYPTION_KEY = get_random_bytes(16)  # 16 –±–∞–π—Ç –¥–ª—è AES-128

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon
client = TelegramClient('session', API_ID, API_HASH)

# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def encrypt_data(data):
    cipher = AES.new(ENCRYPTION_KEY, AES.MODE_EAX)
    nonce = cipher.nonce
    ciphertext, tag = cipher.encrypt_and_digest(data.encode())
    return base64.b64encode(nonce + ciphertext).decode()

# –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def decrypt_data(encrypted_data):
    raw = base64.b64decode(encrypted_data.encode())
    nonce = raw[:16]
    ciphertext = raw[16:]
    cipher = AES.new(ENCRYPTION_KEY, AES.MODE_EAX, nonce=nonce)
    return cipher.decrypt(ciphertext).decode()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
def validate_input(mode, value):
    if mode == 'phone' and not re.match(r'^\+\d{10,15}$', value):
        return False, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567"
    if mode == 'email' and not re.match(r'^[\w\.-]+@[\w\.-]+\.\w+$', value):
        return False, "Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ user@example.com"
    if mode == 'ip' and not re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', value):
        return False, "IP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 192.168.1.1"
    return True, None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users 
                 (id INTEGER PRIMARY KEY, phone TEXT, username TEXT, email TEXT, ip TEXT, chats TEXT)''')
    conn.commit()
    conn.close()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ (–±–µ–∑ pandas)
def load_data(file_path):
    data = []
    if file_path.endswith('.csv'):
        with open(file_path, 'r') as f:
            lines = f.readlines()
            headers = lines[0].strip().split(',')
            for line in lines[1:]:
                values = line.strip().split(',')
                data.append(dict(zip(headers, values)))
    elif file_path.endswith('.json'):
        with open(file_path, 'r') as f:
            data = json.load(f)
    elif file_path.endswith('.txt'):
        with open(file_path, 'r') as f:
            lines = f.readlines()
            headers = lines[0].strip().split('\t')
            for line in lines[1:]:
                values = line.strip().split('\t')
                data.append(dict(zip(headers, values)))
    return data

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ SQLite —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
def save_to_db(data):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    for row in data:
        chats = encrypt_data(row.get('chats', ''))
        c.execute("INSERT OR IGNORE INTO users (id, phone, username, email, ip, chats) VALUES (?, ?, ?, ?, ?, ?)",
                  (row.get('id'), row.get('phone'), row.get('username'), row.get('email'), row.get('ip'), chats))
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üì± –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data='phone')],
        [InlineKeyboardButton("üÜî –ü–æ–∏—Å–∫ –ø–æ ID", callback_data='id')],
        [InlineKeyboardButton("üë§ –ü–æ–∏—Å–∫ –ø–æ username", callback_data='username')],
        [InlineKeyboardButton("üìß –ü–æ–∏—Å–∫ –ø–æ email", callback_data='email')],
        [InlineKeyboardButton("üåê –ü–æ–∏—Å–∫ –ø–æ IP", callback_data='ip')],
        [InlineKeyboardButton("üí¨ –ß–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='chats')],
        [InlineKeyboardButton("üîç –ú—É–ª—å—Ç–∏–ø–æ–∏—Å–∫", callback_data='multi')],
        [InlineKeyboardButton("‚öôÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–∞–∑—É (–ê–¥–º–∏–Ω)", callback_data='admin')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üî• *ALotOf (ALO)* ‚Äî —Ç–≤–æ–π —Ö–∞–∫–µ—Ä—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫! üî•\n"
        "–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é, —á—Ç–æ–±—ã —Ä–∞–∑—ä–µ–±–∞—Ç—å —Å–∏—Å—Ç–µ–º—É:\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.",
        reply_markup=reply_markup, parse_mode='Markdown'
    )
    logging.info(f"User {update.message.from_user.id} started the bot")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context):
    await update.message.reply_text(
        "üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é ALotOf (ALO)* üìö\n\n"
        "1Ô∏è‚É£ *–ü–æ–∏—Å–∫*: –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é (—Ç–µ–ª–µ—Ñ–æ–Ω, ID, username –∏ —Ç.–¥.) –∏ –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ.\n"
        "   - –¢–µ–ª–µ—Ñ–æ–Ω: –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567\n"
        "   - Email: –≤ —Ñ–æ—Ä–º–∞—Ç–µ user@example.com\n"
        "   - IP: –≤ —Ñ–æ—Ä–º–∞—Ç–µ 192.168.1.1\n"
        "2Ô∏è‚É£ *–ú—É–ª—å—Ç–∏–ø–æ–∏—Å–∫*: –í–≤–µ–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "   `phone:+7999 username:user1`\n"
        "3Ô∏è‚É£ *–ß–∞—Ç—ã*: –£–∫–∞–∂–∏ username –∏–ª–∏ ID, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –≤ –∫–∞–∫–∏—Ö —á–∞—Ç–∞—Ö –±—ã–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n"
        "4Ô∏è‚É£ *–ê–¥–º–∏–Ω–∫–∞*: –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –≤—ã–±–µ—Ä–∏ '–î–æ–±–∞–≤–∏—Ç—å –±–∞–∑—É', –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∏ –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª (CSV, TXT, JSON).\n\n"
        "üí• –í—Å—ë –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫! –†–∞–∑—ä—ë–± –ø–æ–ª–Ω—ã–π!",
        parse_mode='Markdown'
    )

# –ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Telethon
async def get_user_chats(identifier):
    await client.start()
    dialogs = await client(GetDialogsRequest(
        offset_date=None,
        offset_id=0,
        offset_peer=InputPeerEmpty(),
        limit=200,
        hash=0
    ))
    chats = []
    for dialog in dialogs.chats:
        chats.append(dialog.title)
    return ", ".join(chats) if chats else "–ß–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context):
    query = update.callback_query
    await query.answer()
    option = query.data

    if option == 'admin':
        await query.edit_message_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
        context.user_data['mode'] = 'admin_password'
    elif option == 'multi':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º—É–ª—å—Ç–∏–ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: phone:+7999 username:user1):")
        context.user_data['mode'] = 'multi'
    else:
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ {option} –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        context.user_data['mode'] = option

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context):
    text = update.message.text
    mode = context.user_data.get('mode')
    user_id = update.message.from_user.id

    if mode == 'admin_password':
        if text == ADMIN_PASSWORD:
            await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (CSV, TXT, JSON):")
            context.user_data['mode'] = 'admin_upload'
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –≤–∞–ª–∏ –æ—Ç—Å—é–¥–∞, –¥–µ–±–∏–ª.")
            context.user_data['mode'] = None
    elif mode == 'admin_upload':
        await update.message.reply_text("–§–∞–π–ª –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /upload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        context.user_data['mode'] = None
    elif mode == 'multi':
        params = dict(re.findall(r'(\w+):(\S+)', text))
        if not params:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: phone:+7999 username:user1")
            return
        result = multi_search(params)
        await update.message.reply_text(result, parse_mode='Markdown')
        logging.info(f"User {user_id} performed multi-search: {params}")
        context.user_data['mode'] = None
    elif mode in ['phone', 'id', 'username', 'email', 'ip', 'chats']:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        if mode in ['phone', 'email', 'ip']:
            is_valid, error = validate_input(mode, text)
            if not is_valid:
                await update.message.reply_text(f"‚ùå {error}")
                return

        if mode == 'chats':
            chats = await get_user_chats(text)
            result = f"üí¨ *–ß–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* üí¨\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n{chats}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        else:
            result = search_in_db(mode, text)
        await update.message.reply_text(result, parse_mode='Markdown')
        logging.info(f"User {user_id} searched {mode}: {text}")
        context.user_data['mode'] = None

# –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ
def search_in_db(mode, value):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    if mode == 'phone':
        c.execute("SELECT * FROM users WHERE phone = ?", (value,))
    elif mode == 'id':
        c.execute("SELECT * FROM users WHERE id = ?", (value,))
    elif mode == 'username':
        c.execute("SELECT * FROM users WHERE username = ?", (value,))
    elif mode == 'email':
        c.execute("SELECT * FROM users WHERE email = ?", (value,))
    elif mode == 'ip':
        c.execute("SELECT * FROM users WHERE ip = ?", (value,))
    
    result = c.fetchone()
    conn.close()

    if result:
        chats = decrypt_data(result[5]) if result[5] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        return (
            f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞* üîç\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üÜî ID: {result[0]}\n"
            f"üì± Phone: {result[1]}\n"
            f"üë§ Username: {result[2]}\n"
            f"üìß Email: {result[3]}\n"
            f"üåê IP: {result[4]}\n"
            f"üí¨ Chats: {chats}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        )
    return "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å—É–∫–∞."

# –ú—É–ª—å—Ç–∏–ø–æ–∏—Å–∫
def multi_search(params):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    query = "SELECT * FROM users WHERE " + " AND ".join(f"{k} = ?" for k in params.keys())
    c.execute(query, list(params.values()))
    result = c.fetchone()
    conn.close()

    if result:
        chats = decrypt_data(result[5]) if result[5] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        return (
            f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç –º—É–ª—å—Ç–∏–ø–æ–∏—Å–∫–∞* üîç\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üÜî ID: {result[0]}\n"
            f"üì± Phone: {result[1]}\n"
            f"üë§ Username: {result[2]}\n"
            f"üìß Email: {result[3]}\n"
            f"üåê IP: {result[4]}\n"
            f"üí¨ Chats: {chats}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        )
    return "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–µ–±–∏–ª."

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
async def handle_file(update: Update, context):
    if context.user_data.get('mode') != 'admin_upload':
        await update.message.reply_text("‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω, –≤–∞–ª–∏ –æ—Ç—Å—é–¥–∞.")
        return
    
    file = update.message.document
    file_path = f"uploads/{file.file_name}"
    os.makedirs("uploads", exist_ok=True)
    await file.download_to_drive(file_path)
    
    data = load_data(file_path)
    if data:
        save_to_db(data)
        await update.message.reply_text(f"‚úÖ –ë–∞–∑–∞ {file.file_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø–∏–∑–¥–µ—Ü –∫–∞–∫ –∫—Ä—É—Ç–æ!")
    else:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ ‚Äî —Ö—É–π–Ω—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    
    context.user_data['mode'] = None

# Webhook handler
app = Application.builder().token(TOKEN).build()

async def webhook(request):
    update = Update.de_json(await request.json(), app.bot)
    await app.process_update(update)
    return web.Response(text="OK")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
def main():
    init_db()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))

    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è webhook
    web_app = web.Application()
    web_app.router.add_post(f"/{TOKEN}", webhook)
    web.run_app(web_app, host="0.0.0.0", port=int(os.getenv("PORT", 8443)))

if __name__ == "__main__":
    main()